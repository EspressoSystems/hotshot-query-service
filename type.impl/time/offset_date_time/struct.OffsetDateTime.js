(function() {var type_impls = {
"hotshot_query_service":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OffsetDateTime\" class=\"impl\"><a href=\"#impl-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.UNIX_EPOCH\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">UNIX_EPOCH</a>: OffsetDateTime = _</h4></section></summary><div class=\"docblock\"><p>Midnight, 1 January, 1970 (UTC).</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(OffsetDateTime::UNIX_EPOCH, <span class=\"macro\">datetime!</span>(<span class=\"number\">1970</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC),);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.now_utc\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">now_utc</a>() -&gt; OffsetDateTime</h4></section></summary><div class=\"docblock\"><p>Create a new <code>OffsetDateTime</code> with the current date and time in UTC.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(OffsetDateTime::now_utc().year() &gt;= <span class=\"number\">2019</span>);\n<span class=\"macro\">assert_eq!</span>(OffsetDateTime::now_utc().offset(), <span class=\"macro\">offset!</span>(UTC));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_in_offset\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">new_in_offset</a>(\n    date: Date,\n    time: Time,\n    offset: UtcOffset\n) -&gt; OffsetDateTime</h4></section></summary><div class=\"docblock\"><p>Create a new <code>OffsetDateTime</code> with the given [<code>Date</code>], [<code>Time</code>], and [<code>UtcOffset</code>].</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>dt = OffsetDateTime::new_in_offset(\n    Date::from_calendar_date(<span class=\"number\">2024</span>, Month::January, <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>,\n    Time::from_hms_nano(<span class=\"number\">12</span>, <span class=\"number\">59</span>, <span class=\"number\">59</span>, <span class=\"number\">500_000_000</span>)<span class=\"question-mark\">?</span>,\n    UtcOffset::from_hms(-<span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)<span class=\"question-mark\">?</span>,\n);\n<span class=\"macro\">assert_eq!</span>(dt, <span class=\"macro\">datetime!</span>(<span class=\"number\">2024</span>-<span class=\"number\">01</span>-<span class=\"number\">01 12</span>:<span class=\"number\">59</span>:<span class=\"number\">59.5 </span>-<span class=\"number\">5</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_utc\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">new_utc</a>(date: Date, time: Time) -&gt; OffsetDateTime</h4></section></summary><div class=\"docblock\"><p>Create a new <code>OffsetDateTime</code> with the given [<code>Date</code>] and [<code>Time</code>] in the UTC timezone.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>dt = OffsetDateTime::new_utc(\n    Date::from_calendar_date(<span class=\"number\">2024</span>, Month::January, <span class=\"number\">1</span>)<span class=\"question-mark\">?</span>,\n    Time::from_hms_nano(<span class=\"number\">12</span>, <span class=\"number\">59</span>, <span class=\"number\">59</span>, <span class=\"number\">500_000_000</span>)<span class=\"question-mark\">?</span>,\n);\n<span class=\"macro\">assert_eq!</span>(dt, <span class=\"macro\">datetime!</span>(<span class=\"number\">2024</span>-<span class=\"number\">01</span>-<span class=\"number\">01 12</span>:<span class=\"number\">59</span>:<span class=\"number\">59.5 </span>UTC));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_offset\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">to_offset</a>(self, offset: UtcOffset) -&gt; OffsetDateTime</h4></section></summary><div class=\"docblock\"><p>Convert the <code>OffsetDateTime</code> from the current [<code>UtcOffset</code>] to the provided [<code>UtcOffset</code>].</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2000</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC)\n        .to_offset(<span class=\"macro\">offset!</span>(-<span class=\"number\">1</span>))\n        .year(),\n    <span class=\"number\">1999</span>,\n);\n\n<span class=\"comment\">// Let's see what time Sydney's new year's celebration is in New York and Los Angeles.\n\n// Construct midnight on new year's in Sydney.\n</span><span class=\"kw\">let </span>sydney = <span class=\"macro\">datetime!</span>(<span class=\"number\">2000</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>+<span class=\"number\">11</span>);\n<span class=\"kw\">let </span>new_york = sydney.to_offset(<span class=\"macro\">offset!</span>(-<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>los_angeles = sydney.to_offset(<span class=\"macro\">offset!</span>(-<span class=\"number\">8</span>));\n<span class=\"macro\">assert_eq!</span>(sydney.hour(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(new_york.hour(), <span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(los_angeles.hour(), <span class=\"number\">5</span>);</code></pre></div>\n<h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>This method panics if the local date-time in the new offset is outside the supported range.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_to_offset\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">checked_to_offset</a>(\n    self,\n    offset: UtcOffset\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;OffsetDateTime&gt;</h4></section></summary><div class=\"docblock\"><p>Convert the <code>OffsetDateTime</code> from the current [<code>UtcOffset</code>] to the provided [<code>UtcOffset</code>],\nreturning <code>None</code> if the date-time in the resulting offset is invalid.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2000</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC)\n        .checked_to_offset(<span class=\"macro\">offset!</span>(-<span class=\"number\">1</span>))\n        .unwrap()\n        .year(),\n    <span class=\"number\">1999</span>,\n);\n<span class=\"macro\">assert_eq!</span>(\n    PrimitiveDateTime::MAX\n        .assume_utc()\n        .checked_to_offset(<span class=\"macro\">offset!</span>(+<span class=\"number\">1</span>)),\n    <span class=\"prelude-val\">None</span>,\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_unix_timestamp\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">from_unix_timestamp</a>(\n    timestamp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.i64.html\">i64</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;OffsetDateTime, ComponentRange&gt;</h4></section></summary><div class=\"docblock\"><p>Create an <code>OffsetDateTime</code> from the provided Unix timestamp. Calling <code>.offset()</code> on the\nresulting value is guaranteed to return UTC.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    OffsetDateTime::from_unix_timestamp(<span class=\"number\">0</span>),\n    <span class=\"prelude-val\">Ok</span>(OffsetDateTime::UNIX_EPOCH),\n);\n<span class=\"macro\">assert_eq!</span>(\n    OffsetDateTime::from_unix_timestamp(<span class=\"number\">1_546_300_800</span>),\n    <span class=\"prelude-val\">Ok</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC)),\n);</code></pre></div>\n<p>If you have a timestamp-nanosecond pair, you can use something along the lines of the\nfollowing:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>(timestamp, nanos) = (<span class=\"number\">1</span>, <span class=\"number\">500_000_000</span>);\n<span class=\"macro\">assert_eq!</span>(\n    OffsetDateTime::from_unix_timestamp(timestamp)<span class=\"question-mark\">? </span>+ Duration::nanoseconds(nanos),\n    OffsetDateTime::UNIX_EPOCH + <span class=\"number\">1.5</span>.seconds()\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_unix_timestamp_nanos\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">from_unix_timestamp_nanos</a>(\n    timestamp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.i128.html\">i128</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;OffsetDateTime, ComponentRange&gt;</h4></section></summary><div class=\"docblock\"><p>Construct an <code>OffsetDateTime</code> from the provided Unix timestamp (in nanoseconds). Calling\n<code>.offset()</code> on the resulting value is guaranteed to return UTC.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    OffsetDateTime::from_unix_timestamp_nanos(<span class=\"number\">0</span>),\n    <span class=\"prelude-val\">Ok</span>(OffsetDateTime::UNIX_EPOCH),\n);\n<span class=\"macro\">assert_eq!</span>(\n    OffsetDateTime::from_unix_timestamp_nanos(<span class=\"number\">1_546_300_800_000_000_000</span>),\n    <span class=\"prelude-val\">Ok</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC)),\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">offset</a>(self) -&gt; UtcOffset</h4></section></summary><div class=\"docblock\"><p>Get the [<code>UtcOffset</code>].</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).offset(), <span class=\"macro\">offset!</span>(UTC));\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>+<span class=\"number\">1</span>).offset(), <span class=\"macro\">offset!</span>(+<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unix_timestamp\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">unix_timestamp</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.i64.html\">i64</a></h4></section></summary><div class=\"docblock\"><p>Get the <a href=\"https://en.wikipedia.org/wiki/Unix_time\">Unix timestamp</a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">1970</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).unix_timestamp(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">1970</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>-<span class=\"number\">1</span>).unix_timestamp(), <span class=\"number\">3_600</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unix_timestamp_nanos\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">unix_timestamp_nanos</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.i128.html\">i128</a></h4></section></summary><div class=\"docblock\"><p>Get the Unix timestamp in nanoseconds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>time_macros::datetime;\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">1970</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).unix_timestamp_nanos(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">1970</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>-<span class=\"number\">1</span>).unix_timestamp_nanos(),\n    <span class=\"number\">3_600_000_000_000</span>,\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.date\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">date</a>(self) -&gt; Date</h4></section></summary><div class=\"docblock\"><p>Get the [<code>Date</code>] in the stored offset.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).date(), <span class=\"macro\">date!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01</span>));\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC)\n        .to_offset(<span class=\"macro\">offset!</span>(-<span class=\"number\">1</span>))\n        .date(),\n    <span class=\"macro\">date!</span>(<span class=\"number\">2018</span>-<span class=\"number\">12</span>-<span class=\"number\">31</span>),\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.time\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">time</a>(self) -&gt; Time</h4></section></summary><div class=\"docblock\"><p>Get the [<code>Time</code>] in the stored offset.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).time(), <span class=\"macro\">time!</span>(<span class=\"number\">0</span>:<span class=\"number\">00</span>));\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC)\n        .to_offset(<span class=\"macro\">offset!</span>(-<span class=\"number\">1</span>))\n        .time(),\n    <span class=\"macro\">time!</span>(<span class=\"number\">23</span>:<span class=\"number\">00</span>)\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.year\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">year</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.i32.html\">i32</a></h4></section></summary><div class=\"docblock\"><p>Get the year of the date in the stored offset.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).year(), <span class=\"number\">2019</span>);\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">12</span>-<span class=\"number\">31 23</span>:<span class=\"number\">00 </span>UTC)\n        .to_offset(<span class=\"macro\">offset!</span>(+<span class=\"number\">1</span>))\n        .year(),\n    <span class=\"number\">2020</span>,\n);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).year(), <span class=\"number\">2020</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.month\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">month</a>(self) -&gt; Month</h4></section></summary><div class=\"docblock\"><p>Get the month of the date in the stored offset.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).month(), Month::January);\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">12</span>-<span class=\"number\">31 23</span>:<span class=\"number\">00 </span>UTC)\n        .to_offset(<span class=\"macro\">offset!</span>(+<span class=\"number\">1</span>))\n        .month(),\n    Month::January,\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.day\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">day</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Get the day of the date in the stored offset.</p>\n<p>The returned value will always be in the range <code>1..=31</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).day(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">12</span>-<span class=\"number\">31 23</span>:<span class=\"number\">00 </span>UTC)\n        .to_offset(<span class=\"macro\">offset!</span>(+<span class=\"number\">1</span>))\n        .day(),\n    <span class=\"number\">1</span>,\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ordinal\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">ordinal</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Get the day of the year of the date in the stored offset.</p>\n<p>The returned value will always be in the range <code>1..=366</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).ordinal(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">12</span>-<span class=\"number\">31 23</span>:<span class=\"number\">00 </span>UTC)\n        .to_offset(<span class=\"macro\">offset!</span>(+<span class=\"number\">1</span>))\n        .ordinal(),\n    <span class=\"number\">1</span>,\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iso_week\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">iso_week</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Get the ISO week number of the date in the stored offset.</p>\n<p>The returned value will always be in the range <code>1..=53</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).iso_week(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).iso_week(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">12</span>-<span class=\"number\">31 0</span>:<span class=\"number\">00 </span>UTC).iso_week(), <span class=\"number\">53</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2021</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).iso_week(), <span class=\"number\">53</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sunday_based_week\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">sunday_based_week</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Get the week number where week 1 begins on the first Sunday.</p>\n<p>The returned value will always be in the range <code>0..=53</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).sunday_based_week(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).sunday_based_week(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">12</span>-<span class=\"number\">31 0</span>:<span class=\"number\">00 </span>UTC).sunday_based_week(), <span class=\"number\">52</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2021</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).sunday_based_week(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.monday_based_week\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">monday_based_week</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Get the week number where week 1 begins on the first Monday.</p>\n<p>The returned value will always be in the range <code>0..=53</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).monday_based_week(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).monday_based_week(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">12</span>-<span class=\"number\">31 0</span>:<span class=\"number\">00 </span>UTC).monday_based_week(), <span class=\"number\">52</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2021</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).monday_based_week(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_calendar_date\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">to_calendar_date</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.i32.html\">i32</a>, Month, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>)</h4></section></summary><div class=\"docblock\"><p>Get the year, month, and day.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).to_calendar_date(),\n    (<span class=\"number\">2019</span>, Month::January, <span class=\"number\">1</span>)\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ordinal_date\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">to_ordinal_date</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Get the year and ordinal day number.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).to_ordinal_date(),\n    (<span class=\"number\">2019</span>, <span class=\"number\">1</span>)\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_iso_week_date\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">to_iso_week_date</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>, Weekday)</h4></section></summary><div class=\"docblock\"><p>Get the ISO 8601 year, week number, and weekday.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).to_iso_week_date(),\n    (<span class=\"number\">2019</span>, <span class=\"number\">1</span>, Tuesday)\n);\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">10</span>-<span class=\"number\">04 0</span>:<span class=\"number\">00 </span>UTC).to_iso_week_date(),\n    (<span class=\"number\">2019</span>, <span class=\"number\">40</span>, Friday)\n);\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).to_iso_week_date(),\n    (<span class=\"number\">2020</span>, <span class=\"number\">1</span>, Wednesday)\n);\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">12</span>-<span class=\"number\">31 0</span>:<span class=\"number\">00 </span>UTC).to_iso_week_date(),\n    (<span class=\"number\">2020</span>, <span class=\"number\">53</span>, Thursday)\n);\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2021</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).to_iso_week_date(),\n    (<span class=\"number\">2020</span>, <span class=\"number\">53</span>, Friday)\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.weekday\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">weekday</a>(self) -&gt; Weekday</h4></section></summary><div class=\"docblock\"><p>Get the weekday of the date in the stored offset.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).weekday(), Tuesday);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">02</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).weekday(), Friday);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">03</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).weekday(), Friday);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_julian_day\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">to_julian_day</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.i32.html\">i32</a></h4></section></summary><div class=\"docblock\"><p>Get the Julian day for the date. The time is not taken into account for this calculation.</p>\n<p>The algorithm to perform this conversion is derived from one provided by Peter Baum; it is\nfreely available <a href=\"https://www.researchgate.net/publication/316558298_Date_Algorithms\">here</a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(-<span class=\"number\">4713</span>-<span class=\"number\">11</span>-<span class=\"number\">24 0</span>:<span class=\"number\">00 </span>UTC).to_julian_day(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2000</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).to_julian_day(), <span class=\"number\">2_451_545</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).to_julian_day(), <span class=\"number\">2_458_485</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">12</span>-<span class=\"number\">31 0</span>:<span class=\"number\">00 </span>UTC).to_julian_day(), <span class=\"number\">2_458_849</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_hms\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">to_hms</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>)</h4></section></summary><div class=\"docblock\"><p>Get the clock hour, minute, and second.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00</span>:<span class=\"number\">00 </span>UTC).to_hms(), (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 23</span>:<span class=\"number\">59</span>:<span class=\"number\">59 </span>UTC).to_hms(), (<span class=\"number\">23</span>, <span class=\"number\">59</span>, <span class=\"number\">59</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_hms_milli\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">to_hms_milli</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Get the clock hour, minute, second, and millisecond.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00</span>:<span class=\"number\">00 </span>UTC).to_hms_milli(),\n    (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)\n);\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 23</span>:<span class=\"number\">59</span>:<span class=\"number\">59.999 </span>UTC).to_hms_milli(),\n    (<span class=\"number\">23</span>, <span class=\"number\">59</span>, <span class=\"number\">59</span>, <span class=\"number\">999</span>)\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_hms_micro\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">to_hms_micro</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class=\"docblock\"><p>Get the clock hour, minute, second, and microsecond.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00</span>:<span class=\"number\">00 </span>UTC).to_hms_micro(),\n    (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)\n);\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 23</span>:<span class=\"number\">59</span>:<span class=\"number\">59.999_999 </span>UTC).to_hms_micro(),\n    (<span class=\"number\">23</span>, <span class=\"number\">59</span>, <span class=\"number\">59</span>, <span class=\"number\">999_999</span>)\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_hms_nano\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">to_hms_nano</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class=\"docblock\"><p>Get the clock hour, minute, second, and nanosecond.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00</span>:<span class=\"number\">00 </span>UTC).to_hms_nano(),\n    (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)\n);\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 23</span>:<span class=\"number\">59</span>:<span class=\"number\">59.999_999_999 </span>UTC).to_hms_nano(),\n    (<span class=\"number\">23</span>, <span class=\"number\">59</span>, <span class=\"number\">59</span>, <span class=\"number\">999_999_999</span>)\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hour\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">hour</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Get the clock hour in the stored offset.</p>\n<p>The returned value will always be in the range <code>0..24</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).hour(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 23</span>:<span class=\"number\">59</span>:<span class=\"number\">59 </span>UTC)\n        .to_offset(<span class=\"macro\">offset!</span>(-<span class=\"number\">2</span>))\n        .hour(),\n    <span class=\"number\">21</span>,\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.minute\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">minute</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Get the minute within the hour in the stored offset.</p>\n<p>The returned value will always be in the range <code>0..60</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).minute(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 23</span>:<span class=\"number\">59</span>:<span class=\"number\">59 </span>UTC)\n        .to_offset(<span class=\"macro\">offset!</span>(+<span class=\"number\">0</span>:<span class=\"number\">30</span>))\n        .minute(),\n    <span class=\"number\">29</span>,\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.second\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">second</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Get the second within the minute in the stored offset.</p>\n<p>The returned value will always be in the range <code>0..60</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).second(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 23</span>:<span class=\"number\">59</span>:<span class=\"number\">59 </span>UTC)\n        .to_offset(<span class=\"macro\">offset!</span>(+<span class=\"number\">0</span>:<span class=\"number\">00</span>:<span class=\"number\">30</span>))\n        .second(),\n    <span class=\"number\">29</span>,\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.millisecond\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">millisecond</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Get the milliseconds within the second in the stored offset.</p>\n<p>The returned value will always be in the range <code>0..1_000</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).millisecond(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 23</span>:<span class=\"number\">59</span>:<span class=\"number\">59.999 </span>UTC).millisecond(), <span class=\"number\">999</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.microsecond\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">microsecond</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Get the microseconds within the second in the stored offset.</p>\n<p>The returned value will always be in the range <code>0..1_000_000</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).microsecond(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 23</span>:<span class=\"number\">59</span>:<span class=\"number\">59.999_999 </span>UTC).microsecond(),\n    <span class=\"number\">999_999</span>,\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nanosecond\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">nanosecond</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Get the nanoseconds within the second in the stored offset.</p>\n<p>The returned value will always be in the range <code>0..1_000_000_000</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).nanosecond(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2019</span>-<span class=\"number\">01</span>-<span class=\"number\">01 23</span>:<span class=\"number\">59</span>:<span class=\"number\">59.999_999_999 </span>UTC).nanosecond(),\n    <span class=\"number\">999_999_999</span>,\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">checked_add</a>(self, duration: Duration) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;OffsetDateTime&gt;</h4></section></summary><div class=\"docblock\"><p>Computes <code>self + duration</code>, returning <code>None</code> if an overflow occurred.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>datetime = Date::MIN.midnight().assume_offset(<span class=\"macro\">offset!</span>(+<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(datetime.checked_add((-<span class=\"number\">2</span>).days()), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>datetime = Date::MAX.midnight().assume_offset(<span class=\"macro\">offset!</span>(+<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(datetime.checked_add(<span class=\"number\">2</span>.days()), <span class=\"prelude-val\">None</span>);\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2019 </span>- <span class=\"number\">11 </span>- <span class=\"number\">25 15</span>:<span class=\"number\">30 </span>+<span class=\"number\">10</span>).checked_add(<span class=\"number\">27</span>.hours()),\n    <span class=\"prelude-val\">Some</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019 </span>- <span class=\"number\">11 </span>- <span class=\"number\">26 18</span>:<span class=\"number\">30 </span>+<span class=\"number\">10</span>))\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">checked_sub</a>(self, duration: Duration) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;OffsetDateTime&gt;</h4></section></summary><div class=\"docblock\"><p>Computes <code>self - duration</code>, returning <code>None</code> if an overflow occurred.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>datetime = Date::MIN.midnight().assume_offset(<span class=\"macro\">offset!</span>(+<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(datetime.checked_sub(<span class=\"number\">2</span>.days()), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>datetime = Date::MAX.midnight().assume_offset(<span class=\"macro\">offset!</span>(+<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(datetime.checked_sub((-<span class=\"number\">2</span>).days()), <span class=\"prelude-val\">None</span>);\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2019 </span>- <span class=\"number\">11 </span>- <span class=\"number\">25 15</span>:<span class=\"number\">30 </span>+<span class=\"number\">10</span>).checked_sub(<span class=\"number\">27</span>.hours()),\n    <span class=\"prelude-val\">Some</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019 </span>- <span class=\"number\">11 </span>- <span class=\"number\">24 12</span>:<span class=\"number\">30 </span>+<span class=\"number\">10</span>))\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">saturating_add</a>(self, duration: Duration) -&gt; OffsetDateTime</h4></section></summary><div class=\"docblock\"><p>Computes <code>self + duration</code>, saturating value on overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(-<span class=\"number\">9999</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>+<span class=\"number\">10</span>).saturating_add((-<span class=\"number\">2</span>).days()),\n    <span class=\"macro\">datetime!</span>(-<span class=\"number\">9999</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>+<span class=\"number\">10</span>)\n);\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(+<span class=\"number\">9999</span>-<span class=\"number\">12</span>-<span class=\"number\">31 23</span>:<span class=\"number\">59</span>:<span class=\"number\">59.999_999_999 </span>+<span class=\"number\">10</span>).saturating_add(<span class=\"number\">2</span>.days()),\n    <span class=\"macro\">datetime!</span>(+<span class=\"number\">9999</span>-<span class=\"number\">12</span>-<span class=\"number\">31 23</span>:<span class=\"number\">59</span>:<span class=\"number\">59.999_999_999 </span>+<span class=\"number\">10</span>)\n);\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2019 </span>- <span class=\"number\">11 </span>- <span class=\"number\">25 15</span>:<span class=\"number\">30 </span>+<span class=\"number\">10</span>).saturating_add(<span class=\"number\">27</span>.hours()),\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2019 </span>- <span class=\"number\">11 </span>- <span class=\"number\">26 18</span>:<span class=\"number\">30 </span>+<span class=\"number\">10</span>)\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">saturating_sub</a>(self, duration: Duration) -&gt; OffsetDateTime</h4></section></summary><div class=\"docblock\"><p>Computes <code>self - duration</code>, saturating value on overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(-<span class=\"number\">9999</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>+<span class=\"number\">10</span>).saturating_sub(<span class=\"number\">2</span>.days()),\n    <span class=\"macro\">datetime!</span>(-<span class=\"number\">9999</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>+<span class=\"number\">10</span>)\n);\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(+<span class=\"number\">9999</span>-<span class=\"number\">12</span>-<span class=\"number\">31 23</span>:<span class=\"number\">59</span>:<span class=\"number\">59.999_999_999 </span>+<span class=\"number\">10</span>).saturating_sub((-<span class=\"number\">2</span>).days()),\n    <span class=\"macro\">datetime!</span>(+<span class=\"number\">9999</span>-<span class=\"number\">12</span>-<span class=\"number\">31 23</span>:<span class=\"number\">59</span>:<span class=\"number\">59.999_999_999 </span>+<span class=\"number\">10</span>)\n);\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2019 </span>- <span class=\"number\">11 </span>- <span class=\"number\">25 15</span>:<span class=\"number\">30 </span>+<span class=\"number\">10</span>).saturating_sub(<span class=\"number\">27</span>.hours()),\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2019 </span>- <span class=\"number\">11 </span>- <span class=\"number\">24 12</span>:<span class=\"number\">30 </span>+<span class=\"number\">10</span>)\n);</code></pre></div>\n</div></details></div></details>",0,"hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OffsetDateTime\" class=\"impl\"><a href=\"#impl-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl OffsetDateTime</h3></section></summary><div class=\"docblock\"><p>Methods that replace part of the <code>OffsetDateTime</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_time\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">replace_time</a>(self, time: Time) -&gt; OffsetDateTime</h4></section></summary><div class=\"docblock\"><p>Replace the time, which is assumed to be in the stored offset. The date and offset\ncomponents are unchanged.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 5</span>:<span class=\"number\">00 </span>UTC).replace_time(<span class=\"macro\">time!</span>(<span class=\"number\">12</span>:<span class=\"number\">00</span>)),\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 12</span>:<span class=\"number\">00 </span>UTC)\n);\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 12</span>:<span class=\"number\">00 </span>-<span class=\"number\">5</span>).replace_time(<span class=\"macro\">time!</span>(<span class=\"number\">7</span>:<span class=\"number\">00</span>)),\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 7</span>:<span class=\"number\">00 </span>-<span class=\"number\">5</span>)\n);\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>+<span class=\"number\">1</span>).replace_time(<span class=\"macro\">time!</span>(<span class=\"number\">12</span>:<span class=\"number\">00</span>)),\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 12</span>:<span class=\"number\">00 </span>+<span class=\"number\">1</span>)\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_date\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">replace_date</a>(self, date: Date) -&gt; OffsetDateTime</h4></section></summary><div class=\"docblock\"><p>Replace the date, which is assumed to be in the stored offset. The time and offset\ncomponents are unchanged.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 12</span>:<span class=\"number\">00 </span>UTC).replace_date(<span class=\"macro\">date!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">30</span>)),\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">30 12</span>:<span class=\"number\">00 </span>UTC)\n);\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>+<span class=\"number\">1</span>).replace_date(<span class=\"macro\">date!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">30</span>)),\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">30 0</span>:<span class=\"number\">00 </span>+<span class=\"number\">1</span>)\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_date_time\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">replace_date_time</a>(\n    self,\n    date_time: PrimitiveDateTime\n) -&gt; OffsetDateTime</h4></section></summary><div class=\"docblock\"><p>Replace the date and time, which are assumed to be in the stored offset. The offset\ncomponent remains unchanged.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 12</span>:<span class=\"number\">00 </span>UTC).replace_date_time(<span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">30 16</span>:<span class=\"number\">00</span>)),\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">30 16</span>:<span class=\"number\">00 </span>UTC)\n);\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 12</span>:<span class=\"number\">00 </span>+<span class=\"number\">1</span>).replace_date_time(<span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">30 0</span>:<span class=\"number\">00</span>)),\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">30 0</span>:<span class=\"number\">00 </span>+<span class=\"number\">1</span>)\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_offset\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">replace_offset</a>(self, offset: UtcOffset) -&gt; OffsetDateTime</h4></section></summary><div class=\"docblock\"><p>Replace the offset. The date and time components remain unchanged.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>UTC).replace_offset(<span class=\"macro\">offset!</span>(-<span class=\"number\">5</span>)),\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">01 0</span>:<span class=\"number\">00 </span>-<span class=\"number\">5</span>)\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_year\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">replace_year</a>(\n    self,\n    year: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.i32.html\">i32</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;OffsetDateTime, ComponentRange&gt;</h4></section></summary><div class=\"docblock\"><p>Replace the year. The month and day will be unchanged.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 12</span>:<span class=\"number\">00 </span>+<span class=\"number\">01</span>).replace_year(<span class=\"number\">2019</span>),\n    <span class=\"prelude-val\">Ok</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2019 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 12</span>:<span class=\"number\">00 </span>+<span class=\"number\">01</span>))\n);\n<span class=\"macro\">assert!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 12</span>:<span class=\"number\">00 </span>+<span class=\"number\">01</span>).replace_year(-<span class=\"number\">1_000_000_000</span>).is_err()); <span class=\"comment\">// -1_000_000_000 isn't a valid year\n</span><span class=\"macro\">assert!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 12</span>:<span class=\"number\">00 </span>+<span class=\"number\">01</span>).replace_year(<span class=\"number\">1_000_000_000</span>).is_err()); <span class=\"comment\">// 1_000_000_000 isn't a valid year</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_month\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">replace_month</a>(\n    self,\n    month: Month\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;OffsetDateTime, ComponentRange&gt;</h4></section></summary><div class=\"docblock\"><p>Replace the month of the year.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 12</span>:<span class=\"number\">00 </span>+<span class=\"number\">01</span>).replace_month(Month::January),\n    <span class=\"prelude-val\">Ok</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">01 </span>- <span class=\"number\">18 12</span>:<span class=\"number\">00 </span>+<span class=\"number\">01</span>))\n);\n<span class=\"macro\">assert!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">01 </span>- <span class=\"number\">30 12</span>:<span class=\"number\">00 </span>+<span class=\"number\">01</span>).replace_month(Month::February).is_err()); <span class=\"comment\">// 30 isn't a valid day in February</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_day\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">replace_day</a>(\n    self,\n    day: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;OffsetDateTime, ComponentRange&gt;</h4></section></summary><div class=\"docblock\"><p>Replace the day of the month.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 12</span>:<span class=\"number\">00 </span>+<span class=\"number\">01</span>).replace_day(<span class=\"number\">1</span>),\n    <span class=\"prelude-val\">Ok</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">01 12</span>:<span class=\"number\">00 </span>+<span class=\"number\">01</span>))\n);\n<span class=\"macro\">assert!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 12</span>:<span class=\"number\">00 </span>+<span class=\"number\">01</span>).replace_day(<span class=\"number\">0</span>).is_err()); <span class=\"comment\">// 00 isn't a valid day\n</span><span class=\"macro\">assert!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 12</span>:<span class=\"number\">00 </span>+<span class=\"number\">01</span>).replace_day(<span class=\"number\">30</span>).is_err()); <span class=\"comment\">// 30 isn't a valid day in February</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_ordinal\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">replace_ordinal</a>(\n    self,\n    ordinal: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u16.html\">u16</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;OffsetDateTime, ComponentRange&gt;</h4></section></summary><div class=\"docblock\"><p>Replace the day of the year.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022</span>-<span class=\"number\">049 12</span>:<span class=\"number\">00 </span>+<span class=\"number\">01</span>).replace_ordinal(<span class=\"number\">1</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022</span>-<span class=\"number\">001 12</span>:<span class=\"number\">00 </span>+<span class=\"number\">01</span>)));\n<span class=\"macro\">assert!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022</span>-<span class=\"number\">049 12</span>:<span class=\"number\">00 </span>+<span class=\"number\">01</span>).replace_ordinal(<span class=\"number\">0</span>).is_err()); <span class=\"comment\">// 0 isn't a valid ordinal\n</span><span class=\"macro\">assert!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022</span>-<span class=\"number\">049 12</span>:<span class=\"number\">00 </span>+<span class=\"number\">01</span>).replace_ordinal(<span class=\"number\">366</span>).is_err()); <span class=\"comment\">// 2022 isn't a leap year</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_hour\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">replace_hour</a>(\n    self,\n    hour: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;OffsetDateTime, ComponentRange&gt;</h4></section></summary><div class=\"docblock\"><p>Replace the clock hour.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 01</span>:<span class=\"number\">02</span>:<span class=\"number\">03.004_005_006 </span>+<span class=\"number\">01</span>).replace_hour(<span class=\"number\">7</span>),\n    <span class=\"prelude-val\">Ok</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 07</span>:<span class=\"number\">02</span>:<span class=\"number\">03.004_005_006 </span>+<span class=\"number\">01</span>))\n);\n<span class=\"macro\">assert!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 01</span>:<span class=\"number\">02</span>:<span class=\"number\">03.004_005_006 </span>+<span class=\"number\">01</span>).replace_hour(<span class=\"number\">24</span>).is_err()); <span class=\"comment\">// 24 isn't a valid hour</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_minute\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">replace_minute</a>(\n    self,\n    minute: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;OffsetDateTime, ComponentRange&gt;</h4></section></summary><div class=\"docblock\"><p>Replace the minutes within the hour.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 01</span>:<span class=\"number\">02</span>:<span class=\"number\">03.004_005_006 </span>+<span class=\"number\">01</span>).replace_minute(<span class=\"number\">7</span>),\n    <span class=\"prelude-val\">Ok</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 01</span>:<span class=\"number\">07</span>:<span class=\"number\">03.004_005_006 </span>+<span class=\"number\">01</span>))\n);\n<span class=\"macro\">assert!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 01</span>:<span class=\"number\">02</span>:<span class=\"number\">03.004_005_006 </span>+<span class=\"number\">01</span>).replace_minute(<span class=\"number\">60</span>).is_err()); <span class=\"comment\">// 60 isn't a valid minute</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_second\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">replace_second</a>(\n    self,\n    second: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;OffsetDateTime, ComponentRange&gt;</h4></section></summary><div class=\"docblock\"><p>Replace the seconds within the minute.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 01</span>:<span class=\"number\">02</span>:<span class=\"number\">03.004_005_006 </span>+<span class=\"number\">01</span>).replace_second(<span class=\"number\">7</span>),\n    <span class=\"prelude-val\">Ok</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 01</span>:<span class=\"number\">02</span>:<span class=\"number\">07.004_005_006 </span>+<span class=\"number\">01</span>))\n);\n<span class=\"macro\">assert!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 01</span>:<span class=\"number\">02</span>:<span class=\"number\">03.004_005_006 </span>+<span class=\"number\">01</span>).replace_second(<span class=\"number\">60</span>).is_err()); <span class=\"comment\">// 60 isn't a valid second</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_millisecond\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">replace_millisecond</a>(\n    self,\n    millisecond: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u16.html\">u16</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;OffsetDateTime, ComponentRange&gt;</h4></section></summary><div class=\"docblock\"><p>Replace the milliseconds within the second.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 01</span>:<span class=\"number\">02</span>:<span class=\"number\">03.004_005_006 </span>+<span class=\"number\">01</span>).replace_millisecond(<span class=\"number\">7</span>),\n    <span class=\"prelude-val\">Ok</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 01</span>:<span class=\"number\">02</span>:<span class=\"number\">03.007 </span>+<span class=\"number\">01</span>))\n);\n<span class=\"macro\">assert!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 01</span>:<span class=\"number\">02</span>:<span class=\"number\">03.004_005_006 </span>+<span class=\"number\">01</span>).replace_millisecond(<span class=\"number\">1_000</span>).is_err()); <span class=\"comment\">// 1_000 isn't a valid millisecond</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_microsecond\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">replace_microsecond</a>(\n    self,\n    microsecond: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u32.html\">u32</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;OffsetDateTime, ComponentRange&gt;</h4></section></summary><div class=\"docblock\"><p>Replace the microseconds within the second.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 01</span>:<span class=\"number\">02</span>:<span class=\"number\">03.004_005_006 </span>+<span class=\"number\">01</span>).replace_microsecond(<span class=\"number\">7_008</span>),\n    <span class=\"prelude-val\">Ok</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 01</span>:<span class=\"number\">02</span>:<span class=\"number\">03.007_008 </span>+<span class=\"number\">01</span>))\n);\n<span class=\"macro\">assert!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 01</span>:<span class=\"number\">02</span>:<span class=\"number\">03.004_005_006 </span>+<span class=\"number\">01</span>).replace_microsecond(<span class=\"number\">1_000_000</span>).is_err()); <span class=\"comment\">// 1_000_000 isn't a valid microsecond</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_nanosecond\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">replace_nanosecond</a>(\n    self,\n    nanosecond: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u32.html\">u32</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;OffsetDateTime, ComponentRange&gt;</h4></section></summary><div class=\"docblock\"><p>Replace the nanoseconds within the second.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 01</span>:<span class=\"number\">02</span>:<span class=\"number\">03.004_005_006 </span>+<span class=\"number\">01</span>).replace_nanosecond(<span class=\"number\">7_008_009</span>),\n    <span class=\"prelude-val\">Ok</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 01</span>:<span class=\"number\">02</span>:<span class=\"number\">03.007_008_009 </span>+<span class=\"number\">01</span>))\n);\n<span class=\"macro\">assert!</span>(<span class=\"macro\">datetime!</span>(<span class=\"number\">2022 </span>- <span class=\"number\">02 </span>- <span class=\"number\">18 01</span>:<span class=\"number\">02</span>:<span class=\"number\">03.004_005_006 </span>+<span class=\"number\">01</span>).replace_nanosecond(<span class=\"number\">1_000_000_000</span>).is_err()); <span class=\"comment\">// 1_000_000_000 isn't a valid nanosecond</span></code></pre></div>\n</div></details></div></details>",0,"hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OffsetDateTime\" class=\"impl\"><a href=\"#impl-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.format_into\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">format_into</a>(\n    self,\n    output: &amp;mut impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,\n    format: &amp;(impl Formattable + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>)\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>, Format&gt;</h4></section></summary><div class=\"docblock\"><p>Format the <code>OffsetDateTime</code> using the provided <a href=\"crate::format_description\">format\ndescription</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.format\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">format</a>(\n    self,\n    format: &amp;(impl Formattable + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>)\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, Format&gt;</h4></section></summary><div class=\"docblock\"><p>Format the <code>OffsetDateTime</code> using the provided <a href=\"crate::format_description\">format\ndescription</a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>format = format_description::parse(\n    <span class=\"string\">\"[year]-[month]-[day] [hour]:[minute]:[second] [offset_hour \\\n         sign:mandatory]:[offset_minute]:[offset_second]\"</span>,\n)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">02 03</span>:<span class=\"number\">04</span>:<span class=\"number\">05 </span>+<span class=\"number\">06</span>:<span class=\"number\">07</span>:<span class=\"number\">08</span>).format(<span class=\"kw-2\">&amp;</span>format)<span class=\"question-mark\">?</span>,\n    <span class=\"string\">\"2020-01-02 03:04:05 +06:07:08\"\n</span>);</code></pre></div>\n</div></details></div></details>",0,"hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OffsetDateTime\" class=\"impl\"><a href=\"#impl-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">parse</a>(\n    input: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.str.html\">str</a>,\n    description: &amp;(impl Parsable + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>)\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;OffsetDateTime, Parse&gt;</h4></section></summary><div class=\"docblock\"><p>Parse an <code>OffsetDateTime</code> from the input using the provided <a href=\"crate::format_description\">format\ndescription</a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>format = <span class=\"macro\">format_description!</span>(\n    <span class=\"string\">\"[year]-[month]-[day] [hour]:[minute]:[second] [offset_hour \\\n         sign:mandatory]:[offset_minute]:[offset_second]\"\n</span>);\n<span class=\"macro\">assert_eq!</span>(\n    OffsetDateTime::parse(<span class=\"string\">\"2020-01-02 03:04:05 +06:07:08\"</span>, <span class=\"kw-2\">&amp;</span>format)<span class=\"question-mark\">?</span>,\n    <span class=\"macro\">datetime!</span>(<span class=\"number\">2020</span>-<span class=\"number\">01</span>-<span class=\"number\">02 03</span>:<span class=\"number\">04</span>:<span class=\"number\">05 </span>+<span class=\"number\">06</span>:<span class=\"number\">07</span>:<span class=\"number\">08</span>)\n);</code></pre></div>\n</div></details></div></details>",0,"hotshot_query_service::availability::query_data::Timestamp"],["<section id=\"impl-Copy-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-Copy-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for OffsetDateTime</h3></section>","Copy","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSystemTime%3E-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-From%3CSystemTime%3E-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/time/struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a>&gt; for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(system_time: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/time/struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a>) -&gt; OffsetDateTime</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<SystemTime>","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SmartDisplay-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-SmartDisplay-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl SmartDisplay for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Metadata\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Metadata\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Metadata</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>User-provided metadata type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>(&amp;self, _: FormatterOptions) -&gt; Metadata&lt;'_, OffsetDateTime&gt;</h4></section></summary><div class='docblock'>Compute any information needed to format the value. This must, at a minimum, determine the\nwidth of the value before any padding is added by the formatter. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt_with_metadata\" class=\"method trait-impl\"><a href=\"#method.fmt_with_metadata\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt_with_metadata</a>(\n    &amp;self,\n    f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;,\n    metadata: Metadata&lt;'_, OffsetDateTime&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Format the value using the given formatter and metadata. The formatted output should have\nthe width indicated by the metadata. This is before any padding is added by the\nformatter. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Format the value using the given formatter. This is the same as <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Display.html#tymethod.fmt\" title=\"method core::fmt::Display::fmt\"><code>Display::fmt</code></a>. <a>Read more</a></div></details></div></details>","SmartDisplay","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-Debug-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CDuration%3E-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-Add%3CDuration%3E-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt; for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a href=\"#method.add\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>) -&gt; &lt;OffsetDateTime as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>This may panic if an overflow occurs.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = OffsetDateTime</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details></div></details>","Add<Duration>","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CDuration%3E-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-Add%3CDuration%3E-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;Duration&gt; for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a href=\"#method.add\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, duration: Duration) -&gt; &lt;OffsetDateTime as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;Duration&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>This may panic if an overflow occurs.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = OffsetDateTime</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details></div></details>","Add<Duration>","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CSystemTime%3E-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-PartialEq%3CSystemTime%3E-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/time/struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a>&gt; for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/time/struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<SystemTime>","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-PartialEq-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;OffsetDateTime) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CDuration%3E-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-Sub%3CDuration%3E-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;Duration&gt; for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a href=\"#method.sub\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: Duration) -&gt; &lt;OffsetDateTime as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;Duration&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>This may panic if an overflow occurs.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = OffsetDateTime</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details></div></details>","Sub<Duration>","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-Sub-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a> for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a href=\"#method.sub\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: OffsetDateTime) -&gt; &lt;OffsetDateTime as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>This may panic if an overflow occurs.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Duration</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details></div></details>","Sub","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CSystemTime%3E-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-Sub%3CSystemTime%3E-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/time/struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a>&gt; for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a href=\"#method.sub\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/time/struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a>) -&gt; &lt;OffsetDateTime as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/time/struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>This may panic if an overflow occurs.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Duration</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details></div></details>","Sub<SystemTime>","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CDuration%3E-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-Sub%3CDuration%3E-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt; for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a href=\"#method.sub\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>) -&gt; &lt;OffsetDateTime as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>This may panic if an overflow occurs.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = OffsetDateTime</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details></div></details>","Sub<Duration>","hotshot_query_service::availability::query_data::Timestamp"],["<section id=\"impl-Eq-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-Eq-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for OffsetDateTime</h3></section>","Eq","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-Clone-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; OffsetDateTime</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-Hash-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-PartialOrd-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;OffsetDateTime) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1125\">source</a></span><a href=\"#method.lt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1142\">source</a></span><a href=\"#method.le\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1158\">source</a></span><a href=\"#method.gt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1175\">source</a></span><a href=\"#method.ge\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CSystemTime%3E-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-PartialOrd%3CSystemTime%3E-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/time/struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a>&gt; for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/time/struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1125\">source</a></span><a href=\"#method.lt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1142\">source</a></span><a href=\"#method.le\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1158\">source</a></span><a href=\"#method.gt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1175\">source</a></span><a href=\"#method.ge\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<SystemTime>","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-Ord-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a href=\"#method.cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;OffsetDateTime) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#829-831\">source</a></span><a href=\"#method.max\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#849-851\">source</a></span><a href=\"#method.min\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#874-877\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","hotshot_query_service::availability::query_data::Timestamp"],["<section id=\"impl-StructuralEq-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-StructuralEq-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.StructuralEq.html\" title=\"trait core::marker::StructuralEq\">StructuralEq</a> for OffsetDateTime</h3></section>","StructuralEq","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-Display-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3CDuration%3E-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-SubAssign%3CDuration%3E-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt; for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a href=\"#method.sub_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>)</h4></section></summary><div class=\"docblock\"><h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>This may panic if an overflow occurs.</p>\n</div></details></div></details>","SubAssign<Duration>","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3CDuration%3E-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-SubAssign%3CDuration%3E-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;Duration&gt; for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a href=\"#method.sub_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: Duration)</h4></section></summary><div class=\"docblock\"><h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>This may panic if an overflow occurs.</p>\n</div></details></div></details>","SubAssign<Duration>","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CParsed%3E-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-TryFrom%3CParsed%3E-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;Parsed&gt; for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = TryFromParsed</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    parsed: Parsed\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;OffsetDateTime, &lt;OffsetDateTime as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;Parsed&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<Parsed>","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3CDuration%3E-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-AddAssign%3CDuration%3E-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;Duration&gt; for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a href=\"#method.add_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, rhs: Duration)</h4></section></summary><div class=\"docblock\"><h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>This may panic if an overflow occurs.</p>\n</div></details></div></details>","AddAssign<Duration>","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3CDuration%3E-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-AddAssign%3CDuration%3E-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt; for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a href=\"#method.add_assign\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>)</h4></section></summary><div class=\"docblock\"><h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>This may panic if an overflow occurs.</p>\n</div></details></div></details>","AddAssign<Duration>","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToSql-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-ToSql-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl ToSql for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a href=\"#method.to_sql\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql</a>(\n    &amp;self,\n    type_: &amp;Type,\n    w: &amp;mut BytesMut\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>&gt;&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> into the binary format of the specified\nPostgres <code>Type</code>, appending it to <code>out</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accepts\" class=\"method trait-impl\"><a href=\"#method.accepts\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">accepts</a>(ty: &amp;Type) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if a value of this type can be converted to the specified\nPostgres <code>Type</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql_checked\" class=\"method trait-impl\"><a href=\"#method.to_sql_checked\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql_checked</a>(\n    &amp;self,\n    ty: &amp;Type,\n    out: &amp;mut BytesMut\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>&gt;&gt;</h4></section></summary><div class='docblock'>An adaptor method used internally by Rust-Postgres. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_format\" class=\"method trait-impl\"><a href=\"#method.encode_format\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_format</a>(&amp;self, _ty: &amp;Type) -&gt; Format</h4></section></summary><div class='docblock'>Specify the encode format</div></details></div></details>","ToSql","hotshot_query_service::availability::query_data::Timestamp"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSql%3C'a%3E-for-OffsetDateTime\" class=\"impl\"><a href=\"#impl-FromSql%3C'a%3E-for-OffsetDateTime\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a&gt; FromSql&lt;'a&gt; for OffsetDateTime</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql\" class=\"method trait-impl\"><a href=\"#method.from_sql\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql</a>(\n    type_: &amp;Type,\n    raw: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>]\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;OffsetDateTime, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>&gt;&gt;</h4></section></summary><div class='docblock'>Creates a new value of this type from a buffer of data of the specified\nPostgres <code>Type</code> in its binary format. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accepts\" class=\"method trait-impl\"><a href=\"#method.accepts\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">accepts</a>(ty: &amp;Type) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if a value of this type can be created from the specified\nPostgres <code>Type</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql_null\" class=\"method trait-impl\"><a href=\"#method.from_sql_null\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql_null</a>(ty: &amp;Type) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>&gt;&gt;</h4></section></summary><div class='docblock'>Creates a new value of this type from a <code>NULL</code> SQL value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql_nullable\" class=\"method trait-impl\"><a href=\"#method.from_sql_nullable\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql_nullable</a>(\n    ty: &amp;Type,\n    raw: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>]&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>&gt;&gt;</h4></section></summary><div class='docblock'>A convenience function that delegates to <code>from_sql</code> and <code>from_sql_null</code> depending on the\nvalue of <code>raw</code>.</div></details></div></details>","FromSql<'a>","hotshot_query_service::availability::query_data::Timestamp"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()